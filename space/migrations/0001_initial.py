# Generated by Django 3.2.5 on 2021-11-14 20:37

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Space',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('space_name', models.CharField(max_length=30)),
                ('space_type', models.CharField(choices=[('STUDY', '스터디룸'), ('STUDIO', '촬영스튜디오'), ('CAFE', '카페 단체석'), ('RESTAURANT', '음식점 단체석'), ('MEETING', '회의실'), ('ETC', '기타')], default='STUDY', max_length=10)),
                ('contact_number', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator(regex='^01([0|1|6|7|8|9])-?([0-9]{3,4})-?([0-9]{4})$')])),
                ('price', models.IntegerField()),
                ('space_brief_detail', models.CharField(max_length=200)),
                ('space_detail', models.TextField()),
                ('address', models.CharField(default='', max_length=200)),
                ('url', models.URLField()),
                ('space_likes', models.IntegerField(default=0)),
                ('space_image', models.ImageField(blank=True, null=True, upload_to='')),
                ('host_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_content', models.TextField()),
                ('space_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='space.space')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('writer', models.CharField(default='', max_length=50)),
                ('question_content', models.TextField()),
                ('space_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='space.space')),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_of_people', models.IntegerField()),
                ('num_of_vaccinated', models.IntegerField()),
                ('booking_date', models.DateField()),
                ('space_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='space.space')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_content', models.TextField()),
                ('question_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='space.question')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
